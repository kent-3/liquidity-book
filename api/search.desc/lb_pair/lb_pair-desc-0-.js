searchState.loadedDescShard("lb_pair", 0, "Liquidity Book Pair\nContains the error value\nContains the success value\nAlias for Result&lt;T, LbPairError&gt;\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the encoded fees amounts for a flash loan\nOverrides the batch transfer function to call the hooks …\nBurn Liquidity Book (LB) tokens and withdraw tokens from …\nCollect the protocol fees from the pool.\nFlash loan tokens from the pool to a receiver contract and …\nForces the decay of the volatility reference variables.\nReturns the argument unchanged.\nIncrease the length of the oracle used by the pool.\nCalls <code>U::from(self)</code>.\nMint liquidity tokens by depositing tokens into the pool.\nHelper function to mint liquidity in each bin in the …\n@notice Sets the hooks parameter of the pool @dev Can only …\nSets the static fee parameters of the pool.\nSwap tokens iterating over the bins until the entire …\nHelper function to update a bin during minting.\nReturns id of the next non-empty bin.\nTransfers the encoded amounts to the recipient for both …\nTransfers the encoded amounts to the recipient, only for …\nTransfers the encoded amounts to the recipient, only for …\nThe mapping from account to token id to account balance.\nContains the error value\nContains the success value\nAlias for Result&lt;T, LbTokenError&gt;\nMapping from account to spender approvals.\nThe mapping from token id to total supply.\nglobal total supply tracker\nBurn <code>amount</code> of <code>id</code> from <code>account</code>. The <code>account</code> must not be …\nReturns true if <code>spender</code> is approved to transfer <code>owner</code>’s …\nMint <code>amount</code> of <code>id</code> to <code>account</code>. The <code>account</code> must not be the …\nGrants or revokes permission to <code>spender</code> to transfer the …\nReturns the amount of tokens of type <code>id</code> owned by <code>account</code>.\nReturn the balance of multiple (account/id) pairs.\nBatch transfers <code>amounts</code> of <code>ids</code> from <code>from</code> to <code>to</code>.\nModifier to check if the spender is approved for all.\nModifier to check if the length of the arrays are equal.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if <code>spender</code> is approved to transfer <code>owner</code>’s …\nReturns the name of the token.\nModifier to check if the address is not zero or the …\nReturns the symbol of the token, usually a shorter version …\nReturns the total supply of token of type <code>id</code>.\nReturns the active id of the Liquidity Book Pair.\nReturns the reserves of all bins, paginated.\nReturns the reserves of a bin.\nReturns the bin step of the Liquidity Book Pair.\nReturns the reserves of many bins.\nReturns the Liquidity Book Factory.\nReturns the id corresponding to the given price.\nGets the hooks parameters of the Liquidity Book Pair.\nReturns the LB Token of the Liquidity Book Pair.\nReturns the next non-empty bin.\nReturns the oracle parameters of the Liquidity Book Pair.\nReturns the cumulative values of the Liquidity Book Pair …\nReturns the price corresponding to the given id, as a …\nReturns the protocol fees of the Liquidity Book Pair.\nReturns the reserves of the Liquidity Book Pair.\nReturns the static fee parameters of the Liquidity Book …\nSimulates a swap in.\nSimulates a swap out.\nReturns the token X of the Liquidity Book Pair.\nReturns the token Y of the Liquidity Book Pair.\nReturns the total supply of the associated LB Token.\nReturns the variable fee parameters of the Liquidity Book …\nHelper function: finds the first bit in the given <code>leaves</code> …\nHelper function: finds the first bit in the given <code>leaves</code> …\nFinds the first <code>id</code> in the tree that is greater than or …\nFinds the first <code>id</code> in the tree that is less than or equal …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")