{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "swap"
      ],
      "properties": {
        "swap": {
          "type": "object",
          "required": [
            "swap_for_y",
            "to"
          ],
          "properties": {
            "swap_for_y": {
              "type": "boolean"
            },
            "to": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "flash_loan"
      ],
      "properties": {
        "flash_loan": {
          "type": "object",
          "required": [
            "amounts",
            "receiver"
          ],
          "properties": {
            "amounts": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              },
              "maxItems": 32,
              "minItems": 32
            },
            "data": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Binary"
                },
                {
                  "type": "null"
                }
              ]
            },
            "receiver": {
              "$ref": "#/definitions/ContractInfo"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "mint"
      ],
      "properties": {
        "mint": {
          "type": "object",
          "required": [
            "liquidity_configs",
            "refund_to",
            "to"
          ],
          "properties": {
            "liquidity_configs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LiquidityConfigurations"
              }
            },
            "refund_to": {
              "type": "string"
            },
            "to": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "burn"
      ],
      "properties": {
        "burn": {
          "type": "object",
          "required": [
            "amounts_to_burn",
            "from",
            "ids",
            "to"
          ],
          "properties": {
            "amounts_to_burn": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Uint256"
              }
            },
            "from": {
              "type": "string"
            },
            "ids": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "to": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "collect_protocol_fees"
      ],
      "properties": {
        "collect_protocol_fees": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "increase_oracle_length"
      ],
      "properties": {
        "increase_oracle_length": {
          "type": "object",
          "required": [
            "new_length"
          ],
          "properties": {
            "new_length": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_static_fee_parameters"
      ],
      "properties": {
        "set_static_fee_parameters": {
          "type": "object",
          "required": [
            "base_factor",
            "decay_period",
            "filter_period",
            "max_volatility_accumulator",
            "protocol_share",
            "reduction_factor",
            "variable_fee_control"
          ],
          "properties": {
            "base_factor": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "decay_period": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "filter_period": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "max_volatility_accumulator": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "protocol_share": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "reduction_factor": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "variable_fee_control": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_hooks_parameters"
      ],
      "properties": {
        "set_hooks_parameters": {
          "type": "object",
          "properties": {
            "hooks_parameters": {
              "anyOf": [
                {
                  "$ref": "#/definitions/HooksParameters"
                },
                {
                  "type": "null"
                }
              ]
            },
            "on_hooks_set_data": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Binary"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "force_decay"
      ],
      "properties": {
        "force_decay": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "batch_transfer_from"
      ],
      "properties": {
        "batch_transfer_from": {
          "type": "object",
          "required": [
            "amounts",
            "from",
            "ids",
            "to"
          ],
          "properties": {
            "amounts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Uint256"
              }
            },
            "from": {
              "type": "string"
            },
            "ids": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "to": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_contract_status"
      ],
      "properties": {
        "set_contract_status": {
          "type": "object",
          "required": [
            "contract_status"
          ],
          "properties": {
            "contract_status": {
              "$ref": "#/definitions/ContractStatus"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "ContractInfo": {
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Addr"
        },
        "code_hash": {
          "default": "",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "ContractStatus": {
      "type": "string",
      "enum": [
        "active",
        "freeze_all",
        "lp_withdraw_only"
      ]
    },
    "HooksParameters": {
      "type": "object",
      "required": [
        "address",
        "code_hash",
        "flags"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "code_hash": {
          "type": "string"
        },
        "flags": {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "LiquidityConfigurations": {
      "type": "array",
      "items": {
        "type": "integer",
        "format": "uint8",
        "minimum": 0.0
      },
      "maxItems": 32,
      "minItems": 32
    },
    "Uint256": {
      "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use secret_cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
      "type": "string"
    }
  }
}
