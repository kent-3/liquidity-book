{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "set_lb_pair_implementation"
      ],
      "properties": {
        "set_lb_pair_implementation": {
          "type": "object",
          "required": [
            "implementation"
          ],
          "properties": {
            "implementation": {
              "$ref": "#/definitions/Implementation"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_lb_token_implementation"
      ],
      "properties": {
        "set_lb_token_implementation": {
          "type": "object",
          "required": [
            "implementation"
          ],
          "properties": {
            "implementation": {
              "$ref": "#/definitions/Implementation"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "create_lb_pair"
      ],
      "properties": {
        "create_lb_pair": {
          "type": "object",
          "required": [
            "active_id",
            "bin_step",
            "entropy",
            "token_x",
            "token_y",
            "viewing_key"
          ],
          "properties": {
            "active_id": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "bin_step": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "entropy": {
              "type": "string"
            },
            "token_x": {
              "$ref": "#/definitions/TokenType"
            },
            "token_y": {
              "$ref": "#/definitions/TokenType"
            },
            "viewing_key": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_lb_pair_ignored"
      ],
      "properties": {
        "set_lb_pair_ignored": {
          "type": "object",
          "required": [
            "bin_step",
            "ignored",
            "token_x",
            "token_y"
          ],
          "properties": {
            "bin_step": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "ignored": {
              "type": "boolean"
            },
            "token_x": {
              "$ref": "#/definitions/TokenType"
            },
            "token_y": {
              "$ref": "#/definitions/TokenType"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_preset"
      ],
      "properties": {
        "set_preset": {
          "type": "object",
          "required": [
            "base_factor",
            "bin_step",
            "decay_period",
            "filter_period",
            "is_open",
            "max_volatility_accumulator",
            "protocol_share",
            "reduction_factor",
            "variable_fee_control"
          ],
          "properties": {
            "base_factor": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "bin_step": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "decay_period": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "filter_period": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "is_open": {
              "type": "boolean"
            },
            "max_volatility_accumulator": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "protocol_share": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "reduction_factor": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "variable_fee_control": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_preset_open_state"
      ],
      "properties": {
        "set_preset_open_state": {
          "type": "object",
          "required": [
            "bin_step",
            "is_open"
          ],
          "properties": {
            "bin_step": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "is_open": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "remove_preset"
      ],
      "properties": {
        "remove_preset": {
          "type": "object",
          "required": [
            "bin_step"
          ],
          "properties": {
            "bin_step": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_fee_parameters_on_pair"
      ],
      "properties": {
        "set_fee_parameters_on_pair": {
          "type": "object",
          "required": [
            "base_factor",
            "bin_step",
            "decay_period",
            "filter_period",
            "max_volatility_accumulator",
            "protocol_share",
            "reduction_factor",
            "token_x",
            "token_y",
            "variable_fee_control"
          ],
          "properties": {
            "base_factor": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "bin_step": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "decay_period": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "filter_period": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "max_volatility_accumulator": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "protocol_share": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "reduction_factor": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "token_x": {
              "$ref": "#/definitions/TokenType"
            },
            "token_y": {
              "$ref": "#/definitions/TokenType"
            },
            "variable_fee_control": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_l_b_hooks_parameters_on_pair"
      ],
      "properties": {
        "set_l_b_hooks_parameters_on_pair": {
          "type": "object",
          "required": [
            "bin_step",
            "hooks_parameters",
            "on_hooks_set_data",
            "token_x",
            "token_y"
          ],
          "properties": {
            "bin_step": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "hooks_parameters": {
              "$ref": "#/definitions/HooksParameters"
            },
            "on_hooks_set_data": {
              "$ref": "#/definitions/Binary"
            },
            "token_x": {
              "$ref": "#/definitions/TokenType"
            },
            "token_y": {
              "$ref": "#/definitions/TokenType"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "remove_l_b_hooks_on_pair"
      ],
      "properties": {
        "remove_l_b_hooks_on_pair": {
          "type": "object",
          "required": [
            "bin_step",
            "token_x",
            "token_y"
          ],
          "properties": {
            "bin_step": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "token_x": {
              "$ref": "#/definitions/TokenType"
            },
            "token_y": {
              "$ref": "#/definitions/TokenType"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_fee_recipient"
      ],
      "properties": {
        "set_fee_recipient": {
          "type": "object",
          "required": [
            "fee_recipient"
          ],
          "properties": {
            "fee_recipient": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_flash_loan_fee"
      ],
      "properties": {
        "set_flash_loan_fee": {
          "type": "object",
          "required": [
            "flash_loan_fee"
          ],
          "properties": {
            "flash_loan_fee": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "add_quote_asset"
      ],
      "properties": {
        "add_quote_asset": {
          "type": "object",
          "required": [
            "asset"
          ],
          "properties": {
            "asset": {
              "$ref": "#/definitions/TokenType"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "remove_quote_asset"
      ],
      "properties": {
        "remove_quote_asset": {
          "type": "object",
          "required": [
            "asset"
          ],
          "properties": {
            "asset": {
              "$ref": "#/definitions/TokenType"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "force_decay"
      ],
      "properties": {
        "force_decay": {
          "type": "object",
          "required": [
            "pair"
          ],
          "properties": {
            "pair": {
              "$ref": "#/definitions/LbPair"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "ContractInfo": {
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Addr"
        },
        "code_hash": {
          "default": "",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "HooksParameters": {
      "type": "object",
      "required": [
        "address",
        "code_hash",
        "flags"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "code_hash": {
          "type": "string"
        },
        "flags": {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "Implementation": {
      "type": "object",
      "required": [
        "code_hash",
        "id"
      ],
      "properties": {
        "code_hash": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "LbPair": {
      "type": "object",
      "required": [
        "bin_step",
        "contract",
        "token_x",
        "token_y"
      ],
      "properties": {
        "bin_step": {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "contract": {
          "$ref": "#/definitions/ContractInfo"
        },
        "token_x": {
          "$ref": "#/definitions/TokenType"
        },
        "token_y": {
          "$ref": "#/definitions/TokenType"
        }
      },
      "additionalProperties": false
    },
    "TokenType": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "custom_token"
          ],
          "properties": {
            "custom_token": {
              "type": "object",
              "required": [
                "contract_addr",
                "token_code_hash"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                },
                "token_code_hash": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use secret_cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
