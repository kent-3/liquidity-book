searchState.loadedDescShard("lb_token", 0, "contract handle function. See ExecuteMsg and ExecuteAnswer …\ninstantiation function. See InitMsg for the api\ncontract query function. See QueryMsg and QueryAnswer for …\nchange token balance of an existing <code>token_id</code>.\nchecks if <code>token_id</code> is available (ie: not yet created), …\nImplements a single <code>Send</code> function. Transfers Uint256 …\nImplements a single <code>Transfer</code> function. Transfers a Uint256 …\ndoes not check if <code>token_id</code> exists so attacker cannot …\nchanges an existing permission entry to default (ie: …\nverifies if sender is a curator\nverifies if sender is a minter of the specific token_id\nstorage key for the BlockInfo when the last handle was …\nprefix for NFT ownership history\nprefix for storing permissions\nprefix for storing permission identifier (ID) for a given …\nprefix for storage of transactions\nprefix for storage of tx ids\nMultilevel bucket to store balances for each token_id &amp; …\nMultilevel bucket to store balances for each token_id &amp; …\nReads BlockInfo of latest tx. Should not be necessary …\nSaves BlockInfo of latest tx. Should not be necessary …\nContract configuration: reads information on this contract\nContract configuration: stores information on this contract\nprivate functions. To read permission. key is to be [<code>owner</code>…\nprivate functions. To store permission. key is to be [<code>owner</code>…\ntoken_id configs. Key is <code>token_id.as_bytes()</code>\ntoken_id configs. Key is <code>token_id.as_bytes()</code>\ntotal supply of a token_id. Key is <code>token_id.as_bytes()</code>\ntotal supply of a token_id. Key is <code>token_id.as_bytes()</code>\nstores a …\nReturn (Vec&lt;<code>PermissionKey { token_id, allowed_addr }</code>&gt;, u64)\nreturns StdResult&lt;Option&gt; for a given [<code>owner</code>, <code>token_id</code>, …\nsaves new permission entry and adds identifier to the list …\nupdates an existing permission entry. Returns error if …\nReturns StdResult from retrieving the item with the …\nReturns StdResult&lt;()&gt; resulting from saving an item to …\nstores ownership history for a given token_id. Meant to be …\nReturns StdResult&lt;()&gt; after saving tx id\nReturns StdResult&lt;(Vec, u64)&gt; of the txs to display and …")